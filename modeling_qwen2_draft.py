#                üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®
#           This file was automatically generated from src/transformers/models/qwen2/modular_qwen2.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_qwen2.py file directly. One of our CI enforces this.
#                üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®
from typing import Callable, Optional, Union
import random
import math
import torch
from torch import nn

from transformers.activations import ACT2FN
from transformers.cache_utils import Cache, DynamicCache
from transformers.generation import GenerationMixin
from transformers.integrations import use_kernel_forward_from_hub
from transformers.masking_utils import create_causal_mask, create_sliding_window_causal_mask
from transformers.modeling_flash_attention_utils import FlashAttentionKwargs
from transformers.modeling_layers import (
    GenericForQuestionAnswering,
    GenericForSequenceClassification,
    GenericForTokenClassification,
    GradientCheckpointingLayer,
)
from transformers.modeling_outputs import BaseModelOutputWithPast, CausalLMOutputWithPast
from transformers.modeling_rope_utils import ROPE_INIT_FUNCTIONS, dynamic_rope_update
from transformers.modeling_utils import ALL_ATTENTION_FUNCTIONS, PreTrainedModel
from transformers.processing_utils import Unpack
from transformers.utils import TransformersKwargs, auto_docstring, can_return_tuple
from transformers.utils.deprecation import deprecate_kwarg
from transformers.utils.generic import check_model_inputs
from .configuration_qwen2 import Qwen2Config

class Cache:
    key_cache: torch.Tensor
    value_cache: torch.Tensor
    
def silu(x):
    # SiLU(x) = x * sigmoid(x)
    return x * torch.sigmoid(x)

def gelu(x):
    # GELU(x) = 0.5 * x * (1 + tanh( sqrt(2/pi)*(x + 0.044715*x^3) ))
    c = torch.sqrt(torch.tensor(2.0 / torch.pi))
    return 0.5 * x * (1.0 + torch.tanh(c * (x + 0.044715 * x ** 3)))

def relu(x):
    # ReLU(x) = max(0, x)
    return torch.maximum(x, torch.zeros_like(x))

ACT2FN = {
    "silu": silu,
    "gelu": gelu,
    "relu": relu,
}

class Qwen2MLP(nn.Module):
    def __init__(self, config):
        super().__init__()
        self.hidden_size = config.hidden_size
        self.intermediate_size = config.intermediate_size
        self.gate_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=False)
        self.up_proj   = nn.Linear(self.hidden_size, self.intermediate_size, bias=False)
        self.down_proj = nn.Linear(self.intermediate_size, self.hidden_size, bias=False)
        self.act_fn = ACT2FN[config.hidden_act]

    def forward(self, x):
        gate_out = self.gate_proj(x)
        gate_act = self.act_fn(gate_out)
        up_out = self.up_proj(x)
        gated_up = gate_act * up_out
        down_out = self.down_proj(gated_up)
        return down_out


def rotate_half(x):
    """Rotates half the hidden dims of the input."""
    x1 = x[..., : x.shape[-1] // 2]
    x2 = x[..., x.shape[-1] // 2 :]
    return torch.cat((-x2, x1), dim=-1)


def apply_rotary_pos_emb(q, k, cos, sin, position_ids=None, unsqueeze_dim=1):
    """Applies Rotary Position Embedding to the query and key tensors.

    Args:
        q (`torch.Tensor`): The query tensor.
        k (`torch.Tensor`): The key tensor.
        cos (`torch.Tensor`): The cosine part of the rotary embedding.
        sin (`torch.Tensor`): The sine part of the rotary embedding.
        position_ids (`torch.Tensor`, *optional*):
            Deprecated and unused.
        unsqueeze_dim (`int`, *optional*, defaults to 1):
            The 'unsqueeze_dim' argument specifies the dimension along which to unsqueeze cos[position_ids] and
            sin[position_ids] so that they can be properly broadcasted to the dimensions of q and k. For example, note
            that cos[position_ids] and sin[position_ids] have the shape [batch_size, seq_len, head_dim]. Then, if q and
            k have the shape [batch_size, heads, seq_len, head_dim], then setting unsqueeze_dim=1 makes
            cos[position_ids] and sin[position_ids] broadcastable to the shapes of q and k. Similarly, if q and k have
            the shape [batch_size, seq_len, heads, head_dim], then set unsqueeze_dim=2.
    Returns:
        `tuple(torch.Tensor)` comprising of the query and key tensors rotated using the Rotary Position Embedding.
    """
    cos = cos.unsqueeze(unsqueeze_dim)
    sin = sin.unsqueeze(unsqueeze_dim)
    q_embed = (q * cos) + (rotate_half(q) * sin)
    k_embed = (k * cos) + (rotate_half(k) * sin)
    return q_embed, k_embed

def zeros(shape):
    """
    T·∫°o tensor ch·ª©a to√†n s·ªë 0
    shape: tuple k√≠ch th∆∞·ªõc (1D, 2D, 3D ho·∫∑c 4D)
    """
    if len(shape) == 0:  # scalar
        return 0
    if len(shape) == 1:  # vector
        return [0 for _ in range(shape[0])]
    elif len(shape) == 2:  # ma tr·∫≠n
        return [[0 for _ in range(shape[1])] for _ in range(shape[0])]
    elif len(shape) == 3:  # tensor 3D
        return [[[0 for _ in range(shape[2])] for _ in range(shape[1])] for _ in range(shape[0])]
    elif len(shape) == 4:  # tensor 4D
        return [[[[0 for _ in range(shape[3])] 
                 for _ in range(shape[2])] 
                for _ in range(shape[1])] 
               for _ in range(shape[0])]
    else:
        raise ValueError(f"Kh√¥ng h·ªó tr·ª£ tensor v·ªõi {len(shape)} chi·ªÅu")

def tensor(data):
    """
    M√¥ ph·ªèng torch.tensor
    data c√≥ th·ªÉ l√† s·ªë ho·∫∑c list nhi·ªÅu chi·ªÅu
    """
    if isinstance(data, (int, float)):   # Scalar
        return {"data": data, "shape": ()}
    
    if isinstance(data, list):
        # H√†m ph·ª• ƒë·ªÉ t√≠nh shape
        def get_shape(x):
            if isinstance(x, list):
                return (len(x),) + get_shape(x[0]) if x else (0,)
            else:
                return ()
        shape = get_shape(data)
        return {"data": data, "shape": shape}

def matmul(A, B, transpose_B=False):
    """
    Nh√¢n ma tr·∫≠n cho tensor nhi·ªÅu chi·ªÅu
    H·ªó tr·ª£:
    - Ma tr·∫≠n 2D: A[m,n] @ B[n,p] -> C[m,p]
    - Tensor 4D: A[batch,heads,seq_q,dim] @ B[batch,heads,seq_k,dim] -> C[batch,heads,seq_q,seq_k]
    """
    # X√°c ƒë·ªãnh s·ªë chi·ªÅu c·ªßa A v√† B
    if not isinstance(A[0], list):  # A l√† vector 1D
        dim_A = 1
    elif not isinstance(A[0][0], list):  # A l√† ma tr·∫≠n 2D
        dim_A = 2
    elif not isinstance(A[0][0][0], list):  # A l√† tensor 3D
        dim_A = 3
    else:  # A l√† tensor 4D
        dim_A = 4
        
    if not isinstance(B[0], list):  # B l√† vector 1D
        dim_B = 1
    elif not isinstance(B[0][0], list):  # B l√† ma tr·∫≠n 2D
        dim_B = 2
    elif not isinstance(B[0][0][0], list):  # B l√† tensor 3D
        dim_B = 3
    else:  # B l√† tensor 4D
        dim_B = 4
    
    # Tr∆∞·ªùng h·ª£p ma tr·∫≠n 2D
    if dim_A == 2 and dim_B == 2:
        m, n = len(A), len(A[0])
        n2 = len(B)
        p = len(B[0])
        assert n == n2, f"K√≠ch th∆∞·ªõc kh√¥ng kh·ªõp: A({m},{n}) @ B({n2},{p})"
        
        C = zeros((m, p))
        for i in range(m):
            for j in range(p):
                for k in range(n):
                    C[i][j] += A[i][k] * B[k][j]
        return C
    
    # Tr∆∞·ªùng h·ª£p tensor 4D
    elif dim_A == 4 and dim_B == 4:
        batch, heads, seq_len_q, head_dim_A = len(A), len(A[0]), len(A[0][0]), len(A[0][0][0])
        batch_B, heads_B, seq_len_k_or_dim, dim_or_seq_len_k = len(B), len(B[0]), len(B[0][0]), len(B[0][0][0])
        
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc
        assert batch == batch_B and heads == heads_B, "Batch ho·∫∑c heads kh√¥ng kh·ªõp"
        
        # Kh·ªüi t·∫°o k·∫øt qu·∫£
        if transpose_B:
            # B c√≥ shape [batch, heads, seq_len_k, head_dim]
            seq_len_k = seq_len_k_or_dim
            head_dim_B = dim_or_seq_len_k
            assert head_dim_A == head_dim_B, "K√≠ch th∆∞·ªõc head_dim kh√¥ng kh·ªõp"
            result = zeros((batch, heads, seq_len_q, seq_len_k))
            
            # Th·ª±c hi·ªán ph√©p nh√¢n ma tr·∫≠n
            for b in range(batch):
                for h in range(heads):
                    for i in range(seq_len_q):
                        for j in range(seq_len_k):
                            sum_val = 0
                            for k in range(head_dim_A):
                                sum_val += A[b][h][i][k] * B[b][h][j][k]  # L∆∞u √Ω transpose B
                            result[b][h][i][j] = sum_val
        else:
            # B c√≥ shape [batch, heads, head_dim, seq_len_k]
            head_dim_B = seq_len_k_or_dim
            seq_len_k = dim_or_seq_len_k
            assert head_dim_A == head_dim_B, "K√≠ch th∆∞·ªõc head_dim kh√¥ng kh·ªõp"
            result = zeros((batch, heads, seq_len_q, seq_len_k))
            
            # Th·ª±c hi·ªán ph√©p nh√¢n ma tr·∫≠n
            for b in range(batch):
                for h in range(heads):
                    for i in range(seq_len_q):
                        for j in range(seq_len_k):
                            sum_val = 0
                            for k in range(head_dim_A):
                                sum_val += A[b][h][i][k] * B[b][h][k][j]
                            result[b][h][i][j] = sum_val
        
        return result
    else:
        raise ValueError(f"Kh√¥ng h·ªó tr·ª£ matmul cho tensor chi·ªÅu {dim_A} v√† {dim_B}")

def transpose(A, dim1=None, dim2=None):
    """
    Chuy·ªÉn v·ªã tensor
    - N·∫øu A l√† ma tr·∫≠n 2D: k·∫øt qu·∫£ l√† A.T th√¥ng th∆∞·ªùng
    - N·∫øu A l√† tensor 4D v√† dim1=-2, dim2=-1: chuy·ªÉn v·ªã 2 chi·ªÅu cu·ªëi
    """
    # X√°c ƒë·ªãnh s·ªë chi·ªÅu c·ªßa A
    if not isinstance(A[0], list):  # A l√† vector 1D
        dim_A = 1
        return A  # Vector kh√¥ng ƒë·ªïi khi chuy·ªÉn v·ªã
    elif not isinstance(A[0][0], list):  # A l√† ma tr·∫≠n 2D
        dim_A = 2
    elif not isinstance(A[0][0][0], list):  # A l√† tensor 3D
        dim_A = 3
    else:  # A l√† tensor 4D
        dim_A = 4
    
    # Tr∆∞·ªùng h·ª£p ma tr·∫≠n 2D
    if dim_A == 2:
        m, n = len(A), len(A[0])
        result = zeros((n, m))
        for i in range(m):
            for j in range(n):
                result[j][i] = A[i][j]
        return result
    
    # Tr∆∞·ªùng h·ª£p tensor 4D - ch·ªâ h·ªó tr·ª£ chuy·ªÉn v·ªã 2 chi·ªÅu cu·ªëi
    elif dim_A == 4:
        if (dim1 == -2 and dim2 == -1) or (dim1 == 2 and dim2 == 3):
            batch, heads, seq_len, dim = len(A), len(A[0]), len(A[0][0]), len(A[0][0][0])
            result = zeros((batch, heads, dim, seq_len))
            
            for b in range(batch):
                for h in range(heads):
                    for i in range(seq_len):
                        for j in range(dim):
                            result[b][h][j][i] = A[b][h][i][j]
            return result
        else:
            raise ValueError("Tensor 4D: Ch·ªâ h·ªó tr·ª£ chuy·ªÉn v·ªã 2 chi·ªÅu cu·ªëi (dim1=-2, dim2=-1)")
    else:
        raise ValueError(f"Kh√¥ng h·ªó tr·ª£ transpose cho tensor chi·ªÅu {dim_A}")

def softmax(x, dim=-1):
    """
    √Åp d·ª•ng softmax
    - x l√† ma tr·∫≠n 2D: softmax theo h√†ng (dim=-1) ho·∫∑c c·ªôt (dim=0)
    - x l√† tensor 4D: softmax theo chi·ªÅu cu·ªëi c√πng (dim=-1)
    """
    # X√°c ƒë·ªãnh s·ªë chi·ªÅu c·ªßa x
    if not isinstance(x[0], list):  # x l√† vector 1D
        dim_x = 1
        # Softmax cho vector 1D
        max_val = max(x)
        exps = [math.exp(v - max_val) for v in x]
        sum_exps = sum(exps)
        return [v / sum_exps for v in exps]
    elif not isinstance(x[0][0], list):  # x l√† ma tr·∫≠n 2D
        dim_x = 2
        m, n = len(x), len(x[0])
        result = zeros((m, n))
        
        if dim == -1 or dim == 1:  # Softmax theo h√†ng
            for i in range(m):
                row = x[i]
                max_val = max(row)
                exps = [math.exp(v - max_val) for v in row]
                sum_exps = sum(exps)
                result[i] = [v / sum_exps for v in exps]
        elif dim == 0:  # Softmax theo c·ªôt
            for j in range(n):
                col = [x[i][j] for i in range(m)]
                max_val = max(col)
                exps = [math.exp(v - max_val) for v in col]
                sum_exps = sum(exps)
                for i in range(m):
                    result[i][j] = exps[i] / sum_exps
        
        return result
    elif not isinstance(x[0][0][0], list):  # x l√† tensor 3D
        dim_x = 3
        raise ValueError("Kh√¥ng h·ªó tr·ª£ softmax cho tensor 3D")
    else:  # x l√† tensor 4D
        dim_x = 4
        batch, heads, seq_len, seq_len_k = len(x), len(x[0]), len(x[0][0]), len(x[0][0][0])
        result = zeros((batch, heads, seq_len, seq_len_k))
        
        if dim == -1 or dim == 3:  # Softmax theo chi·ªÅu cu·ªëi
            for b in range(batch):
                for h in range(heads):
                    for i in range(seq_len):
                        # ·ªîn ƒë·ªãnh s·ªë h·ªçc: tr·ª´ max
                        row = x[b][h][i]
                        max_val = max(row)
                        exps = [math.exp(v - max_val) for v in row]
                        sum_exps = sum(exps)
                        result[b][h][i] = [v / sum_exps for v in exps]
        else:
            raise ValueError("Tensor 4D: Ch·ªâ h·ªó tr·ª£ softmax theo chi·ªÅu cu·ªëi (dim=-1)")
        
        return result

def dropout(x, p=0.0, training=True):
    """
    √Åp d·ª•ng dropout cho tensor
    - H·ªó tr·ª£ tensor 2D v√† 4D
    """
    if not training or p == 0.0:
        return x
    
    # X√°c ƒë·ªãnh s·ªë chi·ªÅu c·ªßa x
    if not isinstance(x[0], list):  # x l√† vector 1D
        dim_x = 1
        n = len(x)
        result = [0] * n
        for i in range(n):
            if random.random() > p:
                result[i] = x[i] / (1 - p)
        return result
    elif not isinstance(x[0][0], list):  # x l√† ma tr·∫≠n 2D
        dim_x = 2
        m, n = len(x), len(x[0])
        result = zeros((m, n))
        for i in range(m):
            for j in range(n):
                if random.random() > p:
                    result[i][j] = x[i][j] / (1 - p)
        return result
    elif not isinstance(x[0][0][0], list):  # x l√† tensor 3D
        dim_x = 3
        raise ValueError("Kh√¥ng h·ªó tr·ª£ dropout cho tensor 3D")
    else:  # x l√† tensor 4D
        dim_x = 4
        batch, heads, seq_len, dim = len(x), len(x[0]), len(x[0][0]), len(x[0][0][0])
        result = zeros((batch, heads, seq_len, dim))
        
        for b in range(batch):
            for h in range(heads):
                for i in range(seq_len):
                    for j in range(dim):
                        if random.random() > p:
                            result[b][h][i][j] = x[b][h][i][j] / (1 - p)
        
        return result

def add(x, y, broadcast_y=False):
    """
    C·ªông hai tensor
    - H·ªó tr·ª£ tensor 2D v√† 4D
    - N·∫øu broadcast_y=True v√† x l√† tensor 4D: y ƒë∆∞·ª£c coi l√† [batch, 1, seq_len_q, seq_len_k]
    """
    # X√°c ƒë·ªãnh s·ªë chi·ªÅu c·ªßa x
    if not isinstance(x[0], list):  # x l√† vector 1D
        dim_x = 1
        n = len(x)
        result = [0] * n
        for i in range(n):
            result[i] = x[i] + y[i]
        return result
    elif not isinstance(x[0][0], list):  # x l√† ma tr·∫≠n 2D
        dim_x = 2
        m, n = len(x), len(x[0])
        result = zeros((m, n))
        for i in range(m):
            for j in range(n):
                result[i][j] = x[i][j] + y[i][j]
        return result
    elif not isinstance(x[0][0][0], list):  # x l√† tensor 3D
        dim_x = 3
        raise ValueError("Kh√¥ng h·ªó tr·ª£ add cho tensor 3D")
    else:  # x l√† tensor 4D
        dim_x = 4
        batch, heads, seq_len_q, seq_len_k = len(x), len(x[0]), len(x[0][0]), len(x[0][0][0])
        result = zeros((batch, heads, seq_len_q, seq_len_k))
        
        if broadcast_y:
            # y c√≥ shape [batch, 1, seq_len_q, seq_len_k]
            for b in range(batch):
                for h in range(heads):
                    for i in range(seq_len_q):
                        for j in range(seq_len_k):
                            result[b][h][i][j] = x[b][h][i][j] + y[b][0][i][j]
        else:
            # y c√≥ shape [batch, heads, seq_len_q, seq_len_k]
            for b in range(batch):
                for h in range(heads):
                    for i in range(seq_len_q):
                        for j in range(seq_len_k):
                            result[b][h][i][j] = x[b][h][i][j] + y[b][h][i][j]
        
        return result

def scale(x, scaling_factor):
    """
    Nh√¢n tensor v·ªõi m·ªôt scalar
    - H·ªó tr·ª£ tensor 2D v√† 4D
    """
    # X√°c ƒë·ªãnh s·ªë chi·ªÅu c·ªßa x
    if not isinstance(x[0], list):  # x l√† vector 1D
        dim_x = 1
        return [v * scaling_factor for v in x]
    elif not isinstance(x[0][0], list):  # x l√† ma tr·∫≠n 2D
        dim_x = 2
        m, n = len(x), len(x[0])
        result = zeros((m, n))
        for i in range(m):
            for j in range(n):
                result[i][j] = x[i][j] * scaling_factor
        return result
    elif not isinstance(x[0][0][0], list):  # x l√† tensor 3D
        dim_x = 3
        raise ValueError("Kh√¥ng h·ªó tr·ª£ scale cho tensor 3D")
    else:  # x l√† tensor 4D
        dim_x = 4
        batch, heads, seq_len, dim = len(x), len(x[0]), len(x[0][0]), len(x[0][0][0])
        result = zeros((batch, heads, seq_len, dim))
        
        for b in range(batch):
            for h in range(heads):
                for i in range(seq_len):
                    for j in range(dim):
                        result[b][h][i][j] = x[b][h][i][j] * scaling_factor
        
        return result

def repeat_kv(hidden_states, n_rep):
    """
    L·∫∑p l·∫°i tensor key/value cho GQA (Grouped-Query Attention)
    hidden_states: [batch, num_key_value_heads, seqlen, head_dim]
    n_rep: s·ªë l·∫ßn l·∫∑p cho m·ªói head (num_attention_heads / num_key_value_heads)
    return: [batch, num_attention_heads, seqlen, head_dim]
    """
    if n_rep == 1:
        return hidden_states
    
    batch, num_kv_heads, seq_len, head_dim = len(hidden_states), len(hidden_states[0]), len(hidden_states[0][0]), len(hidden_states[0][0][0])
    output = zeros((batch, num_kv_heads * n_rep, seq_len, head_dim))

    for b in range(batch):
        for h in range(num_kv_heads):
            for r in range(n_rep):
                new_h = h * n_rep + r
                for i in range(seq_len):
                    for d in range(head_dim):
                        output[b][new_h][i][d] = hidden_states[b][h][i][d]

    return output

# =========================
# H√†m attention t∆∞·ªùng minh
# =========================
def eager_attention_forward(
    query,       # [batch, num_heads, seq_len_q, head_dim]
    key,         # [batch, num_heads, seq_len_k, head_dim]
    value,       # [batch, num_heads, seq_len_k, head_dim]
    attention_mask=None,  # [batch, 1, seq_len_q, seq_len_k]
    scaling=1.0,
    dropout_p=0.0,
    training=True
):
    """
    T√≠nh to√°n attention m·ªôt c√°ch t∆∞·ªùng minh, th√≠ch h·ª£p cho thi·∫øt k·∫ø ph·∫ßn c·ª©ng
    """
    # 1. Chuy·ªÉn v·ªã key (cu·ªëi c√πng chuy·ªÉn th√†nh head_dim, seq_k)
    key_t = transpose(key, dim1=-2, dim2=-1)  # [batch, num_heads, head_dim, seq_len_k]
    
    # 2. Nh√¢n query v·ªõi key.T ƒë·ªÉ t√≠nh attention scores
    attn_weights = matmul(query, key_t)  # [batch, num_heads, seq_len_q, seq_len_k]
    
    # 3. Scale attention scores
    attn_weights = scale(attn_weights, scaling)
    
    # 4. C·ªông mask (n·∫øu c√≥)
    if attention_mask is not None:
        attn_weights = add(attn_weights, attention_mask, broadcast_y=True)
    
    # 5. √Åp d·ª•ng softmax theo chi·ªÅu seq_len_k
    attn_weights = softmax(attn_weights, dim=-1)
    
    # 6. √Åp d·ª•ng dropout
    attn_weights = dropout(attn_weights, p=dropout_p, training=training)
    
    # 7. Nh√¢n attention weights v·ªõi value ƒë·ªÉ t√≠nh attention output
    attn_output = matmul(attn_weights, value)  # [batch, num_heads, seq_len_q, head_dim]
    
    return attn_output, attn_weights

class Qwen2Attention(nn.Module):
    """Multi-headed attention t·ª´ 'Attention Is All You Need' paper ƒë∆∞·ª£c vi·∫øt l·∫°i t∆∞·ªùng minh cho thi·∫øt k·∫ø ph·∫ßn c·ª©ng"""

    def __init__(self, config: Qwen2Config, layer_idx: int):
        super().__init__()
        self.config = config
        self.layer_idx = layer_idx
        
        # C√°c tham s·ªë ch√≠nh
        self.hidden_size = config.hidden_size
        self.head_dim = getattr(config, "head_dim", config.hidden_size // config.num_attention_heads)
        self.num_attention_heads = config.num_attention_heads
        self.num_key_value_heads = config.num_key_value_heads
        self.num_key_value_groups = config.num_attention_heads // config.num_key_value_heads
        self.scaling = self.head_dim**-0.5
        self.attention_dropout = config.attention_dropout
        self.is_causal = True
        
        # C√°c l·ªõp projection
        self.q_proj = nn.Linear(config.hidden_size, config.num_attention_heads * self.head_dim, bias=True)
        self.k_proj = nn.Linear(config.hidden_size, config.num_key_value_heads * self.head_dim, bias=True)
        self.v_proj = nn.Linear(config.hidden_size, config.num_key_value_heads * self.head_dim, bias=True)
        self.o_proj = nn.Linear(config.num_attention_heads * self.head_dim, config.hidden_size, bias=False)
        
        # Sliding window attention (n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh cho layer n√†y)
        self.sliding_window = config.sliding_window if config.layer_types[layer_idx] == "sliding_attention" else None

    def forward(
        self,
        hidden_states: torch.Tensor,
        position_embeddings: tuple[torch.Tensor, torch.Tensor],
        attention_mask: Optional[torch.Tensor] = None,
        past_key_values: Optional[Cache] = None,
        cache_position: Optional[torch.LongTensor] = None,
        **kwargs
    ) -> tuple[torch.Tensor, Optional[torch.Tensor]]:
        """
        T√≠nh to√°n t∆∞·ªùng minh qu√° tr√¨nh attention
        
        Args:
            hidden_states: Tensor v·ªõi shape [batch_size, seq_len, hidden_size]
            position_embeddings: Tuple (cos, sin) cho rotary embeddings
            attention_mask: Mask tensor v·ªõi shape [batch_size, 1, seq_len, seq_len]
            past_key_values: KV cache t·ª´ c√°c b∆∞·ªõc tr∆∞·ªõc ƒë√≥
            cache_position: V·ªã tr√≠ trong cache
        
        Returns:
            output: Tensor v·ªõi shape [batch_size, seq_len, hidden_size]
            attention_weights: Optional tensor v·ªõi attention weights
        """
        batch_size, seq_len = hidden_states.shape[:2]
        
        # === 1. PROJECT HIDDEN STATES TO QUERY, KEY, VALUE ===
        # Projections qkv: [batch_size, seq_len, hidden_size] -> [batch_size, seq_len, num_*_heads * head_dim]
        query_states = self.q_proj(hidden_states)
        key_states = self.k_proj(hidden_states)
        value_states = self.v_proj(hidden_states)
        
        # === 2. RESHAPE QUERY, KEY, VALUE FOR MULTI-HEAD ATTENTION ===
        # Reshape: [batch_size, seq_len, num_*_heads * head_dim] -> [batch_size, seq_len, num_*_heads, head_dim]
        query_states = query_states.view(batch_size, seq_len, self.num_attention_heads, self.head_dim)
        key_states = key_states.view(batch_size, seq_len, self.num_key_value_heads, self.head_dim)
        value_states = value_states.view(batch_size, seq_len, self.num_key_value_heads, self.head_dim)
        
        # Transpose: [batch_size, seq_len, num_*_heads, head_dim] -> [batch_size, num_*_heads, seq_len, head_dim]
        query_states = query_states.transpose(1, 2)
        key_states = key_states.transpose(1, 2)
        value_states = value_states.transpose(1, 2)
        
        # === 3. APPLY ROTARY POSITION EMBEDDINGS ===
        cos, sin = position_embeddings
        # Apply RoPE cho query v√† key
        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin)
        
        # === 4. HANDLE KV CACHE ===
        if past_key_values is not None:
            # Update key v√† value b·∫±ng KV cache
            cache_kwargs = {"sin": sin, "cos": cos, "cache_position": cache_position}
            key_states, value_states = past_key_values.update(key_states, value_states, self.layer_idx, cache_kwargs)

        attention_interface: Callable = eager_attention_forward
        if self.config._attn_implementation != "eager":
            attention_interface = ALL_ATTENTION_FUNCTIONS[self.config._attn_implementation]

        attn_output, attn_weights = attention_interface(
            self,
            query_states,
            key_states,
            value_states,
            attention_mask,
            dropout=0.0 if not self.training else self.attention_dropout,
            scaling=self.scaling,
            sliding_window=self.sliding_window,  # main diff with Llama
            **kwargs,
        )
        
        # Reshape: [batch_size, seq_len, num_attention_heads, head_dim] -> [batch_size, seq_len, num_attention_heads * head_dim]
        attn_output = attn_output.reshape(batch_size, seq_len, self.num_attention_heads * self.head_dim)
        
        # === 11. PROJECT OUTPUT ===
        # Final projection: [batch_size, seq_len, num_attention_heads * head_dim] -> [batch_size, seq_len, hidden_size]
        attn_output = self.o_proj(attn_output)
        
        return attn_output, attn_weights



@use_kernel_forward_from_hub("RMSNorm")
class Qwen2RMSNorm(nn.Module):
    def __init__(self, hidden_size: int, eps: float = 1e-6):
        super().__init__()
        # Tham s·ªë scale (gamma), ban ƒë·∫ßu = 1
        self.weight = nn.Parameter(torch.ones(hidden_size))
        # Epsilon ƒë·ªÉ tr√°nh chia cho 0
        self.eps = eps

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        # x c√≥ shape [batch_size, seq_len, hidden_size]
        H = x.shape[-1]  # s·ªë chi·ªÅu ·∫©n (hidden size)

        # 1. B√¨nh ph∆∞∆°ng t·ª´ng ph·∫ßn t·ª≠
        squared = x * x  # c√πng shape nh∆∞ x

        # 2. T√≠nh t·ªïng b√¨nh ph∆∞∆°ng theo chi·ªÅu ·∫©n
        sum_squared = squared.sum(dim=-1, keepdim=True)  # [batch, seq, 1]

        # 3. Trung b√¨nh b√¨nh ph∆∞∆°ng
        mean_square = sum_squared / H  # [batch, seq, 1]

        # 4. Th√™m epsilon v√† l·∫•y cƒÉn b·∫≠c hai (RMS)
        rms = torch.sqrt(mean_square + self.eps)  # [batch, seq, 1]

        # 5. Chu·∫©n h√≥a input
        normed = x / rms  # [batch, seq, hidden_size]

        # 6. Nh√¢n v·ªõi tham s·ªë scale gamma
        out = normed * self.weight  # broadcast gamma: [hidden_size]

        return out


class Qwen2DecoderLayer(GradientCheckpointingLayer):
    def __init__(self, config: Qwen2Config, layer_idx: int):
        super().__init__()
        self.hidden_size = config.hidden_size

        self.self_attn = Qwen2Attention(config=config, layer_idx=layer_idx)

        self.mlp = Qwen2MLP(config)
        self.input_layernorm = Qwen2RMSNorm(config.hidden_size, eps=config.rms_norm_eps)
        self.post_attention_layernorm = Qwen2RMSNorm(config.hidden_size, eps=config.rms_norm_eps)
        self.attention_type = config.layer_types[layer_idx]

    @deprecate_kwarg("past_key_value", new_name="past_key_values", version="4.58")
    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[Cache] = None,
        use_cache: Optional[bool] = False,
        cache_position: Optional[torch.LongTensor] = None,
        position_embeddings: Optional[tuple[torch.Tensor, torch.Tensor]] = None,  # necessary, but kept here for BC
        **kwargs: Unpack[TransformersKwargs],
    ) -> torch.Tensor:
        residual = hidden_states
        hidden_states = self.input_layernorm(hidden_states)
        # Self Attention
        hidden_states, _ = self.self_attn(
            hidden_states=hidden_states,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_values=past_key_values,
            use_cache=use_cache,
            cache_position=cache_position,
            position_embeddings=position_embeddings,
            **kwargs,
        )
        hidden_states = residual + hidden_states

        # Fully Connected
        residual = hidden_states
        hidden_states = self.post_attention_layernorm(hidden_states)
        hidden_states = self.mlp(hidden_states)
        hidden_states = residual + hidden_states
        return hidden_states


@auto_docstring
class Qwen2PreTrainedModel(PreTrainedModel):
    config: Qwen2Config
    base_model_prefix = "model"
    supports_gradient_checkpointing = True
    _no_split_modules = ["Qwen2DecoderLayer"]
    _skip_keys_device_placement = ["past_key_values"]
    _supports_flash_attn = True
    _supports_sdpa = True
    _supports_flex_attn = True

    _can_compile_fullgraph = True
    _supports_attention_backend = True
    _can_record_outputs = {
        "hidden_states": Qwen2DecoderLayer,
        "attentions": Qwen2Attention,
    }


class Qwen2RotaryEmbedding(nn.Module):
    """
    Phi√™n b·∫£n t·ªëi gi·∫£n c·ªßa Rotary Embedding cho Qwen2.

    Kh√°c bi·ªát so v·ªõi b·∫£n g·ªëc trong transformers:
    - B·ªè c∆° ch·∫ø rope_scaling ph·ª©c t·∫°p v√† dynamic_rope_update.
    - Kh√¥ng c·∫≠p nh·∫≠t ƒë·ªông inv_freq.
    - attention_scaling c·ªë ƒë·ªãnh = 1.0.
    - C√¥ng th·ª©c gi·ªëng phi√™n b·∫£n RotaryEmbedding b·∫°n cung c·∫•p (nh√¢n position_ids v·ªõi inv_freq r·ªìi nh√¢n ƒë√¥i tr·ª•c cu·ªëi).

    Tr·∫£ v·ªÅ:
        cos, sin c√≥ shape [batch, seq_len, head_dim]
    ƒë·ªÉ d√πng tr·ª±c ti·∫øp trong apply_rotary_pos_emb(query, key, cos, sin).
    """

    def __init__(self, config, device=None):
        super().__init__()
        hidden_size = config.hidden_size
        num_heads = config.num_attention_heads
        # head_dim c√≥ th·ªÉ ƒë∆∞·ª£c truy·ªÅn trong config (ƒë·ªÉ t∆∞∆°ng th√≠ch khi model t√πy bi·∫øn), n·∫øu kh√¥ng t·ª± suy ra
        self.head_dim = getattr(config, "head_dim", hidden_size // num_heads)

        # Gi√° tr·ªã theta (m·∫∑c ƒë·ªãnh 10000 n·∫øu kh√¥ng c√≥)
        theta = getattr(config, "rope_theta", 10000.0)

        # inv_freq: [head_dim/2]
        half_dim = self.head_dim // 2
        # torch.arange(0, head_dim, 2) => 0,2,4,... (k√≠ch th∆∞·ªõc = half_dim)
        freq_seq = torch.arange(0, self.head_dim, 2, dtype=torch.float32)
        inv_freq = 1.0 / (theta ** (freq_seq / self.head_dim))

        self.register_buffer("inv_freq", inv_freq, persistent=False)

        # Gi·ªØ l·∫°i m·ªôt v√†i thu·ªôc t√≠nh ƒë·ªÉ tr√°nh l·ªói n·∫øu n∆°i kh√°c k·ª≥ v·ªçng
        self.max_seq_len_cached = getattr(config, "max_position_embeddings", None)
        self.original_max_seq_len = self.max_seq_len_cached
        self.attention_scaling = 1.0  # B·∫£n ƒë∆°n gi·∫£n kh√¥ng scale th√™m

    def forward(self, x: torch.Tensor, position_ids: torch.LongTensor):
        """
        x: Tensor [batch, seq_len, hidden_size] (ch·ªâ d√πng ƒë·ªÉ l·∫•y dtype v√† device)
        position_ids: Tensor [batch, seq_len] (gi·ªëng c√°ch Qwen2Model x√¢y d·ª±ng)

        Tr·∫£ v·ªÅ:
            cos: [batch, seq_len, head_dim]
            sin: [batch, seq_len, head_dim]
        """
        device = x.device
        dtype = x.dtype

        inv_freq = self.inv_freq.to(device=device)  # [half_dim]

        # position_ids: [batch, seq_len] -> float
        pos = position_ids.to(device=device).float()  # [B, L]

        # T·∫°o freqs: m·ªói v·ªã tr√≠ nh√¢n v·ªõi to√†n b·ªô inv_freq
        # K·∫øt qu·∫£: [B, L, half_dim]
        freqs = pos[:, :, None] * inv_freq[None, None, :]

        # Gh√©p ƒë√¥i ƒë·ªÉ th√†nh head_dim: [B, L, head_dim]
        emb = torch.cat([freqs, freqs], dim=-1)

        # T√≠nh cos/sin + (t√πy ch·ªçn) attention_scaling (·ªü ƒë√¢y = 1.0)
        cos = emb.cos() * self.attention_scaling
        sin = emb.sin() * self.attention_scaling

        return cos.to(dtype=dtype), sin.to(dtype=dtype)


@auto_docstring
class Qwen2Model(Qwen2PreTrainedModel):
    def __init__(self, config: Qwen2Config):
        super().__init__(config)
        self.padding_idx = config.pad_token_id
        self.vocab_size = config.vocab_size

        self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.padding_idx)
        self.layers = nn.ModuleList(
            [Qwen2DecoderLayer(config, layer_idx) for layer_idx in range(config.num_hidden_layers)]
        )
        self.norm = Qwen2RMSNorm(config.hidden_size, eps=config.rms_norm_eps)
        self.rotary_emb = Qwen2RotaryEmbedding(config=config)
        self.gradient_checkpointing = False
        self.has_sliding_layers = "sliding_attention" in self.config.layer_types

        # Initialize weights and apply final processing
        self.post_init()

    @check_model_inputs
    @auto_docstring
    def forward(
        self,
        input_ids: Optional[torch.LongTensor] = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[Cache] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        use_cache: Optional[bool] = None,
        cache_position: Optional[torch.LongTensor] = None,
        **kwargs: Unpack[TransformersKwargs],
    ) -> BaseModelOutputWithPast:
        if (input_ids is None) ^ (inputs_embeds is not None):
            raise ValueError("You must specify exactly one of input_ids or inputs_embeds")

        if inputs_embeds is None:
            inputs_embeds = self.embed_tokens(input_ids)

        if use_cache and past_key_values is None:
            past_key_values = DynamicCache(config=self.config)

        if cache_position is None:
            past_seen_tokens = past_key_values.get_seq_length() if past_key_values is not None else 0
            cache_position = torch.arange(
                past_seen_tokens, past_seen_tokens + inputs_embeds.shape[1], device=inputs_embeds.device
            )

        if position_ids is None:
            position_ids = cache_position.unsqueeze(0)

        # It may already have been prepared by e.g. `generate`
        if not isinstance(causal_mask_mapping := attention_mask, dict):
            # Prepare mask arguments
            mask_kwargs = {
                "config": self.config,
                "input_embeds": inputs_embeds,
                "attention_mask": attention_mask,
                "cache_position": cache_position,
                "past_key_values": past_key_values,
                "position_ids": position_ids,
            }
            # Create the masks
            causal_mask_mapping = {
                "full_attention": create_causal_mask(**mask_kwargs),
            }
            # The sliding window alternating layers are not always activated depending on the config
            if self.has_sliding_layers:
                causal_mask_mapping["sliding_attention"] = create_sliding_window_causal_mask(**mask_kwargs)

        hidden_states = inputs_embeds

        # create position embeddings to be shared across the decoder layers
        position_embeddings = self.rotary_emb(hidden_states, position_ids)

        for decoder_layer in self.layers[: self.config.num_hidden_layers]:
            hidden_states = decoder_layer(
                hidden_states,
                attention_mask=causal_mask_mapping[decoder_layer.attention_type],
                position_ids=position_ids,
                past_key_values=past_key_values,
                use_cache=use_cache,
                cache_position=cache_position,
                position_embeddings=position_embeddings,
                **kwargs,
            )

        hidden_states = self.norm(hidden_states)
        return BaseModelOutputWithPast(
            last_hidden_state=hidden_states,
            past_key_values=past_key_values if use_cache else None,
        )


@auto_docstring
class Qwen2ForCausalLM(Qwen2PreTrainedModel, GenerationMixin):
    _tied_weights_keys = ["lm_head.weight"]
    _tp_plan = {"lm_head": "colwise_rep"}
    _pp_plan = {"lm_head": (["hidden_states"], ["logits"])}

    def __init__(self, config):
        super().__init__(config)
        self.model = Qwen2Model(config)
        self.vocab_size = config.vocab_size
        self.lm_head = nn.Linear(config.hidden_size, config.vocab_size, bias=False)

        # Initialize weights and apply final processing
        self.post_init()

    @can_return_tuple
    @auto_docstring
    def forward(
        self,
        input_ids: Optional[torch.LongTensor] = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[Cache] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        labels: Optional[torch.LongTensor] = None,
        use_cache: Optional[bool] = None,
        cache_position: Optional[torch.LongTensor] = None,
        logits_to_keep: Union[int, torch.Tensor] = 0,
        **kwargs: Unpack[TransformersKwargs],
    ) -> CausalLMOutputWithPast:
        r"""
        Example:

        ```python
        >>> from transformers import AutoTokenizer, Qwen2ForCausalLM

        >>> model = Qwen2ForCausalLM.from_pretrained("meta-qwen2/Qwen2-2-7b-hf")
        >>> tokenizer = AutoTokenizer.from_pretrained("meta-qwen2/Qwen2-2-7b-hf")

        >>> prompt = "Hey, are you conscious? Can you talk to me?"
        >>> inputs = tokenizer(prompt, return_tensors="pt")

        >>> # Generate
        >>> generate_ids = model.generate(inputs.input_ids, max_length=30)
        >>> tokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]
        "Hey, are you conscious? Can you talk to me?\nI'm not conscious, but I can talk to you."
        ```"""
        outputs: BaseModelOutputWithPast = self.model(
            input_ids=input_ids,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_values=past_key_values,
            inputs_embeds=inputs_embeds,
            use_cache=use_cache,
            cache_position=cache_position,
            **kwargs,
        )

        hidden_states = outputs.last_hidden_state
        # Only compute necessary logits, and do not upcast them to float if we are not computing the loss
        slice_indices = slice(-logits_to_keep, None) if isinstance(logits_to_keep, int) else logits_to_keep
        logits = self.lm_head(hidden_states[:, slice_indices, :])

        loss = None
        if labels is not None:
            loss = self.loss_function(logits=logits, labels=labels, vocab_size=self.config.vocab_size, **kwargs)

        return CausalLMOutputWithPast(
            loss=loss,
            logits=logits,
            past_key_values=outputs.past_key_values,
            hidden_states=outputs.hidden_states,
            attentions=outputs.attentions,
        )


class Qwen2ForSequenceClassification(GenericForSequenceClassification, Qwen2PreTrainedModel):
    pass


class Qwen2ForTokenClassification(GenericForTokenClassification, Qwen2PreTrainedModel):
    pass


class Qwen2ForQuestionAnswering(GenericForQuestionAnswering, Qwen2PreTrainedModel):
    base_model_prefix = "transformer"  # For BC, where `transformer` was used instead of `model`


__all__ = [
    "Qwen2PreTrainedModel",
    "Qwen2Model",
    "Qwen2ForCausalLM",
    "Qwen2RMSNorm",
    "Qwen2ForSequenceClassification",
    "Qwen2ForTokenClassification",
    "Qwen2ForQuestionAnswering",
]
